// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package order

import (
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewMockCache creates a new instance of MockCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCache[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCache[T] {
	mock := &MockCache[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCache is an autogenerated mock type for the Cache type
type MockCache[T any] struct {
	mock.Mock
}

type MockCache_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *MockCache[T]) EXPECT() *MockCache_Expecter[T] {
	return &MockCache_Expecter[T]{mock: &_m.Mock}
}

// Get provides a mock function for the type MockCache
func (_mock *MockCache[T]) Get(k string) (T, bool) {
	ret := _mock.Called(k)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 T
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func(string) (T, bool)); ok {
		return returnFunc(k)
	}
	if returnFunc, ok := ret.Get(0).(func(string) T); ok {
		r0 = returnFunc(k)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(T)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) bool); ok {
		r1 = returnFunc(k)
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// MockCache_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCache_Get_Call[T any] struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - k string
func (_e *MockCache_Expecter[T]) Get(k interface{}) *MockCache_Get_Call[T] {
	return &MockCache_Get_Call[T]{Call: _e.mock.On("Get", k)}
}

func (_c *MockCache_Get_Call[T]) Run(run func(k string)) *MockCache_Get_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCache_Get_Call[T]) Return(v T, b bool) *MockCache_Get_Call[T] {
	_c.Call.Return(v, b)
	return _c
}

func (_c *MockCache_Get_Call[T]) RunAndReturn(run func(k string) (T, bool)) *MockCache_Get_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function for the type MockCache
func (_mock *MockCache[T]) Set(k string, v T, expiration time.Duration) {
	_mock.Called(k, v, expiration)
	return
}

// MockCache_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockCache_Set_Call[T any] struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - k string
//   - v T
//   - expiration time.Duration
func (_e *MockCache_Expecter[T]) Set(k interface{}, v interface{}, expiration interface{}) *MockCache_Set_Call[T] {
	return &MockCache_Set_Call[T]{Call: _e.mock.On("Set", k, v, expiration)}
}

func (_c *MockCache_Set_Call[T]) Run(run func(k string, v T, expiration time.Duration)) *MockCache_Set_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 T
		if args[1] != nil {
			arg1 = args[1].(T)
		}
		var arg2 time.Duration
		if args[2] != nil {
			arg2 = args[2].(time.Duration)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockCache_Set_Call[T]) Return() *MockCache_Set_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *MockCache_Set_Call[T]) RunAndReturn(run func(k string, v T, expiration time.Duration)) *MockCache_Set_Call[T] {
	_c.Run(run)
	return _c
}
