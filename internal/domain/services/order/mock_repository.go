// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package order

import (
	"context"
	"wb-L0-task/internal/domain/order"

	mock "github.com/stretchr/testify/mock"
)

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// Exists provides a mock function for the type MockRepository
func (_mock *MockRepository) Exists(ctx context.Context, orderUID string) (bool, error) {
	ret := _mock.Called(ctx, orderUID)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return returnFunc(ctx, orderUID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = returnFunc(ctx, orderUID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, orderUID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockRepository_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - orderUID string
func (_e *MockRepository_Expecter) Exists(ctx interface{}, orderUID interface{}) *MockRepository_Exists_Call {
	return &MockRepository_Exists_Call{Call: _e.mock.On("Exists", ctx, orderUID)}
}

func (_c *MockRepository_Exists_Call) Run(run func(ctx context.Context, orderUID string)) *MockRepository_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_Exists_Call) Return(b bool, err error) *MockRepository_Exists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockRepository_Exists_Call) RunAndReturn(run func(ctx context.Context, orderUID string) (bool, error)) *MockRepository_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function for the type MockRepository
func (_mock *MockRepository) GetById(ctx context.Context, orderUID string) (*order.Order, error) {
	ret := _mock.Called(ctx, orderUID)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *order.Order
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*order.Order, error)); ok {
		return returnFunc(ctx, orderUID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *order.Order); ok {
		r0 = returnFunc(ctx, orderUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.Order)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, orderUID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type MockRepository_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - ctx context.Context
//   - orderUID string
func (_e *MockRepository_Expecter) GetById(ctx interface{}, orderUID interface{}) *MockRepository_GetById_Call {
	return &MockRepository_GetById_Call{Call: _e.mock.On("GetById", ctx, orderUID)}
}

func (_c *MockRepository_GetById_Call) Run(run func(ctx context.Context, orderUID string)) *MockRepository_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_GetById_Call) Return(order1 *order.Order, err error) *MockRepository_GetById_Call {
	_c.Call.Return(order1, err)
	return _c
}

func (_c *MockRepository_GetById_Call) RunAndReturn(run func(ctx context.Context, orderUID string) (*order.Order, error)) *MockRepository_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrderDelivery provides a mock function for the type MockRepository
func (_mock *MockRepository) GetOrderDelivery(ctx context.Context, orderUID string) (*order.Delivery, error) {
	ret := _mock.Called(ctx, orderUID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderDelivery")
	}

	var r0 *order.Delivery
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*order.Delivery, error)); ok {
		return returnFunc(ctx, orderUID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *order.Delivery); ok {
		r0 = returnFunc(ctx, orderUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.Delivery)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, orderUID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetOrderDelivery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderDelivery'
type MockRepository_GetOrderDelivery_Call struct {
	*mock.Call
}

// GetOrderDelivery is a helper method to define mock.On call
//   - ctx context.Context
//   - orderUID string
func (_e *MockRepository_Expecter) GetOrderDelivery(ctx interface{}, orderUID interface{}) *MockRepository_GetOrderDelivery_Call {
	return &MockRepository_GetOrderDelivery_Call{Call: _e.mock.On("GetOrderDelivery", ctx, orderUID)}
}

func (_c *MockRepository_GetOrderDelivery_Call) Run(run func(ctx context.Context, orderUID string)) *MockRepository_GetOrderDelivery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_GetOrderDelivery_Call) Return(delivery *order.Delivery, err error) *MockRepository_GetOrderDelivery_Call {
	_c.Call.Return(delivery, err)
	return _c
}

func (_c *MockRepository_GetOrderDelivery_Call) RunAndReturn(run func(ctx context.Context, orderUID string) (*order.Delivery, error)) *MockRepository_GetOrderDelivery_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrderItems provides a mock function for the type MockRepository
func (_mock *MockRepository) GetOrderItems(ctx context.Context, orderUID string) ([]order.Item, error) {
	ret := _mock.Called(ctx, orderUID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderItems")
	}

	var r0 []order.Item
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]order.Item, error)); ok {
		return returnFunc(ctx, orderUID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []order.Item); ok {
		r0 = returnFunc(ctx, orderUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]order.Item)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, orderUID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetOrderItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderItems'
type MockRepository_GetOrderItems_Call struct {
	*mock.Call
}

// GetOrderItems is a helper method to define mock.On call
//   - ctx context.Context
//   - orderUID string
func (_e *MockRepository_Expecter) GetOrderItems(ctx interface{}, orderUID interface{}) *MockRepository_GetOrderItems_Call {
	return &MockRepository_GetOrderItems_Call{Call: _e.mock.On("GetOrderItems", ctx, orderUID)}
}

func (_c *MockRepository_GetOrderItems_Call) Run(run func(ctx context.Context, orderUID string)) *MockRepository_GetOrderItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_GetOrderItems_Call) Return(items []order.Item, err error) *MockRepository_GetOrderItems_Call {
	_c.Call.Return(items, err)
	return _c
}

func (_c *MockRepository_GetOrderItems_Call) RunAndReturn(run func(ctx context.Context, orderUID string) ([]order.Item, error)) *MockRepository_GetOrderItems_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrderPayment provides a mock function for the type MockRepository
func (_mock *MockRepository) GetOrderPayment(ctx context.Context, orderUID string) (*order.Payment, error) {
	ret := _mock.Called(ctx, orderUID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderPayment")
	}

	var r0 *order.Payment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*order.Payment, error)); ok {
		return returnFunc(ctx, orderUID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *order.Payment); ok {
		r0 = returnFunc(ctx, orderUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.Payment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, orderUID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetOrderPayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderPayment'
type MockRepository_GetOrderPayment_Call struct {
	*mock.Call
}

// GetOrderPayment is a helper method to define mock.On call
//   - ctx context.Context
//   - orderUID string
func (_e *MockRepository_Expecter) GetOrderPayment(ctx interface{}, orderUID interface{}) *MockRepository_GetOrderPayment_Call {
	return &MockRepository_GetOrderPayment_Call{Call: _e.mock.On("GetOrderPayment", ctx, orderUID)}
}

func (_c *MockRepository_GetOrderPayment_Call) Run(run func(ctx context.Context, orderUID string)) *MockRepository_GetOrderPayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_GetOrderPayment_Call) Return(payment *order.Payment, err error) *MockRepository_GetOrderPayment_Call {
	_c.Call.Return(payment, err)
	return _c
}

func (_c *MockRepository_GetOrderPayment_Call) RunAndReturn(run func(ctx context.Context, orderUID string) (*order.Payment, error)) *MockRepository_GetOrderPayment_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrders provides a mock function for the type MockRepository
func (_mock *MockRepository) GetOrders(ctx context.Context, limit int32) ([]order.Order, error) {
	ret := _mock.Called(ctx, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetOrders")
	}

	var r0 []order.Order
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) ([]order.Order, error)); ok {
		return returnFunc(ctx, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) []order.Order); ok {
		r0 = returnFunc(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]order.Order)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = returnFunc(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetOrders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrders'
type MockRepository_GetOrders_Call struct {
	*mock.Call
}

// GetOrders is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int32
func (_e *MockRepository_Expecter) GetOrders(ctx interface{}, limit interface{}) *MockRepository_GetOrders_Call {
	return &MockRepository_GetOrders_Call{Call: _e.mock.On("GetOrders", ctx, limit)}
}

func (_c *MockRepository_GetOrders_Call) Run(run func(ctx context.Context, limit int32)) *MockRepository_GetOrders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int32
		if args[1] != nil {
			arg1 = args[1].(int32)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_GetOrders_Call) Return(orders []order.Order, err error) *MockRepository_GetOrders_Call {
	_c.Call.Return(orders, err)
	return _c
}

func (_c *MockRepository_GetOrders_Call) RunAndReturn(run func(ctx context.Context, limit int32) ([]order.Order, error)) *MockRepository_GetOrders_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type MockRepository
func (_mock *MockRepository) Save(ctx context.Context, order1 *order.Order) error {
	ret := _mock.Called(ctx, order1)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *order.Order) error); ok {
		r0 = returnFunc(ctx, order1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - order1 *order.Order
func (_e *MockRepository_Expecter) Save(ctx interface{}, order1 interface{}) *MockRepository_Save_Call {
	return &MockRepository_Save_Call{Call: _e.mock.On("Save", ctx, order1)}
}

func (_c *MockRepository_Save_Call) Run(run func(ctx context.Context, order1 *order.Order)) *MockRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *order.Order
		if args[1] != nil {
			arg1 = args[1].(*order.Order)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_Save_Call) Return(err error) *MockRepository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_Save_Call) RunAndReturn(run func(ctx context.Context, order1 *order.Order) error) *MockRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}
