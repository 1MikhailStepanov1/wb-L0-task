services:
  backend:
    build:
      context: .
      dockerfile: ./build/Dockerfile
    container_name: backend
    ports:
      - "8080:${HTTP_APP_PORT:-8080}"
    environment:
      LOG_LEVEL: ${LOGGER_MOD:-"DEV"}
      CACHE_DEFAULT_EXP_TIME: ${CACHE_DEFAULT_EXP_TIME:-60}
      SERVER_HTTP_PORT: ${HTTP_APP_PORT:-8080}
      SERVER_SHUTDOWN_TIMEOUT: ${HTTP_SHUTDOWN_TIMEOUT:-10}
      SERVER_HTTP_READ_TIMEOUT: ${SERVER_HTTP_READ_TIMEOUT:-5}
      SERVER_HTTP_WRITE_TIMEOUT: ${SERVER_HTTP_WRITE_TIMEOUT:-1}
      SERVER_HTTP_IDLE_TIMEOUT: ${SERVER_HTTP_IDLE_TIMEOUT:-30}
      SERVER_HTTP_READ_HEADER_TIMEOUT: ${SERVER_HTTP_READ_HEADER_TIMEOUT:-1}
      POSTGRES_HOST: ${POSTGRES_HOST:-wb-db}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME:-order_service_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-Passw0rd}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE:-order_db}
      KAFKA_BROKERS_URL: ${KAFKA_BROKERS_URL:-wb-kafka:19092}
      KAFKA_INPUT_TOPIC: ${KAFKA_INPUT_TOPIC:-orders}
      KAFKA_CONSUMER_AUTO_OFFSET_RESET: ${KAFKA_CONSUMER_AUTO_OFFSET_RESET:-earliest}
      KAFKA_CONSUMER_GROUP_ID: ${KAFKA_CONSUMER_GROUP_ID:-wb-cons-group}
    networks:
      - wb-l0-task
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started

  postgres:
    image: postgres:14
    container_name: wb-db
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: passw0rd
      POSTGRES_DB: postgres
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5435:5432"
    volumes:
      - ./containers-data/pgdata:/var/lib/postgresql/data/pgdata
      - ./containers-data/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - wb-l0-task
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d postgres" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  kafka:
    image: apache/kafka:3.7.0
    container_name: wb-kafka
    environment:
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_NODE_ID: "1"
      KAFKA_PROCESS_ROLES: "controller,broker"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_LISTENERS: "INTERNAL://:19092,EXTERNAL://:9092,CONTROLLER://:9093"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://wb-kafka:19092,EXTERNAL://localhost:9092"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_LOG_DIRS: "/tmp/kraft-combined-logs"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
      - "9093:9093"
      - "19092:19092"
    volumes:
      - ./containers-data/kafka-data:/tmp/kraft-combined-logs
    networks:
      - wb-l0-task
    restart: unless-stopped

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: wb-kafka-ui
    environment:
      KAFKA_CLUSTERS_0_NAME: "local-kraft"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "wb-kafka:19092"
      KAFKA_CLUSTERS_0_ZOOKEEPER: ""
      KAFKA_CLUSTERS_0_KRAFT: "true"
    ports:
      - "8100:8080"
    depends_on:
      - kafka
    networks:
      - wb-l0-task
    restart: unless-stopped

volumes:
  pgdata:
    driver: local

networks:
  wb-l0-task:
    name: wb-l0-task
    driver: bridge